"""
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç-–±–æ—Ç—É ¬´–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏¬ª –Ω–∞ Python –¥–ª—è Telegram.

=======–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏:======
Weather API:
https://openweathermap.org/api

Telegram Bot API
https://core.telegram.org/bots/api

–°–º–∞–π–ª–∏–∫–∏:
https://www.freecodecamp.org/ukrainian/news/spysok-emodzi-dlya-kopiyuvannya-ta-vstavlennya/

–ë–æ—Ç:
t.me/Serhii_Donkin_WeatherBot_bot

"""

import os
import datetime
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram.ext import ContextTypes

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_TOKEN = os.getenv("WEATHER_API_KEY")

if not TELEGRAM_TOKEN or not WEATHER_TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–∏ —É —Ñ–∞–π–ª—ñ .env")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start. –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏.
    """
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é! –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É, —ñ —è —Å–∫–∞–∂—É, —è–∫–∞ —Ç–∞–º –ø–æ–≥–æ–¥–∞ ‚òÄÔ∏è"
    )


def get_weather_sync(city: str) -> str:
    """
    –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ OpenWeatherMap API —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ.
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É –ø—É–ª—ñ –ø–æ—Ç–æ–∫—ñ–≤.
    """
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric&lang=uk"

    response = None
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
    except requests.exceptions.HTTPError as e:
        if response.status_code == 404:
            return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è."
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {e}"
    except requests.exceptions.RequestException:
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø–æ–≥–æ–¥–Ω–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º."

    city_name = data["name"]
    dt = data["dt"]
    temp = data["main"]["temp"]
    temp_min = data["main"]["temp_min"]
    temp_max = data["main"]["temp_max"]
    feels_like = data["main"]["feels_like"]
    desc = data["weather"][0]["description"].capitalize()
    humidity = data["main"]["humidity"]
    wind = data["wind"]["speed"]
    wind_gust = data["wind"].get("gust", 0)
    gust_info = f"üå¨ –ü–æ—Ä–∏–≤–∏ –≤—ñ—Ç—Ä—É: {wind_gust} –º/—Å" if wind_gust > 0 else ""
    visibility = data["visibility"]
    clouds = data["clouds"]["all"]
    sunrise = data["sys"]["sunrise"]
    sunset = data["sys"]["sunset"]
    icon_code = data["weather"][0]["icon"]
    code_prefix = icon_code[:2]
    icon_map = {
        "01": "‚òÄÔ∏è",  # –Ø—Å–Ω–æ (–°–æ–Ω—Ü–µ/–ú—ñ—Å—è—Ü—å)
        "02": "üå§Ô∏è",  # –ù–µ–≤–µ–ª–∏–∫–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å
        "03": "üå•Ô∏è",  # –•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏
        "04": "‚òÅÔ∏è",  # –†–æ–∑—Å—ñ—è–Ω—ñ —Ö–º–∞—Ä–∏
        "09": "üåßÔ∏è",  # –ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â
        "10": "‚òî",  # –î–æ—â
        "11": "‚õàÔ∏è",  # –ì—Ä–æ–∑–∞
        "13": "‚ùÑÔ∏è",  # –°–Ω—ñ–≥
        "50": "üå´Ô∏è"  # –¢—É–º–∞–Ω
    }

    if code_prefix == "01" and icon_code.endswith('n'):
        icon = "üåô"
    else:
        icon = icon_map.get(code_prefix, "‚ùì")

    return (
        f"üè† –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: {city.capitalize()} / {city_name}\n"
        f"‚åö –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ: {datetime.datetime.fromtimestamp(dt).strftime('%H:%M')}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like}¬∞C)\n"
        f"{icon} {desc}\n"
        f"‚¨áÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}¬∞C\n"
        f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_max}¬∞C\n"
        f"‚õÖ –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds} %\n"
        f"üí® –í—ñ—Ç–µ—Ä: {wind} –º/—Å\n"
        f"{gust_info}\n"
        f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
        f"üëÄ –í–∏–¥–∏–º—ñ—Å—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö: {round(visibility / 1000, 0)} –∫–º \n"
        f"üåÖ –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {datetime.datetime.fromtimestamp(sunrise).strftime('%H:%M')}\n"
        f"üåá –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {datetime.datetime.fromtimestamp(sunset).strftime('%H:%M')}"
    )


async def send_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç,
    –≤–∏–∫–ª–∏–∫–∞—é—á–∏ get_weather_sync —É –ø—É–ª—ñ –ø–æ—Ç–æ–∫—ñ–≤.
    """
    city = update.message.text.strip()
    await update.message.reply_text(get_weather_sync(city))


def main() -> None:
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è. –ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞.
    """
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_weather))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()


if __name__ == "__main__":
    main()
